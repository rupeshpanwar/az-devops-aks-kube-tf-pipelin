trigger:
- main

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: TerraformValidate
    jobs:
     - job: TerraformValidateJob
       continueOnError: false
       steps:
         - task:  PublishPipelineArtifact@1
           displayName: Publish Artifacts
           inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
         - task: TerraformInstaller@0
           displayName: Terraform Install
           inputs:
              terraformVersion: 'latest'
         - task: TerraformCLI@0
           displayName: Terraform init
           inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              backendType: 'azurerm'
              backendServiceArm: 'Azure subscription 1(5044cc49-3ccd-46a8-8d0a-10c2360ee144)'
              ensureBackend: true
              backendAzureRmResourceGroupName: 'tfsazaskrgp'
              backendAzureRmResourceGroupLocation: 'australiaeast'
              backendAzureRmStorageAccountName: 'tfaksazsafortfsfile'
              backendAzureRmContainerName: 'tfscontainerfiles'
              backendAzureRmKey: 'aks-base.tfstate'
              allowTelemetryCollection: false
         - task: TerraformCLI@0
           displayName: Terraform Validate
           inputs:
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              allowTelemetryCollection: false    

# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)

  - stage:
    jobs:
      - deployment: DeployDevAksCluster
        displayName: DeployDevAksCluster
        pool: 
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
         runOnce:
           deploy:
             steps:
               - task: DownloadSecureFile@1
                 displayName: Download SSH Key
                 name: sshkey
                 inputs:
                   secureFile: '''aks-terraform-devops-ssh-key-ububtu.pub'''
               - task: TerraformCLI@0
                 displayName: Terraform Init
                 inputs:
                    command: 'init'
                    backendType: 'azurerm'
                    backendServiceArm: 'Azure subscription 1(5044cc49-3ccd-46a8-8d0a-10c2360ee144)'
                    ensureBackend: true
                    backendAzureRmResourceGroupName: 'tfsazaskrgp'
                    backendAzureRmResourceGroupLocation: 'australiaeast'
                    backendAzureRmStorageAccountName: 'tfaksazsafortfsfile'
                    backendAzureRmContainerName: 'tfscontainerfiles'
                    backendAzureRmKey: 'aks-base.tfstate'
                    allowTelemetryCollection: false               
               - task: TerraformCLI@0
                 displayName: Terraform Plan
                 inputs:
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'terraform-aks-azurerm-svc-con'
                    commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false
               - task: TerraformCLI@0
                 displayName: Terraform Apply
                 inputs:
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'terraform-aks-azurerm-svc-con'
                    commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false